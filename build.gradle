// Top-level build file where you can add configuration options common to all sub-projects/modules.
buildscript {
    ext {
        kotlin_version = '1.3.72'
    }
    repositories {
        google()
        jcenter()
    }
    dependencies {

        classpath Dependencies.tools_gradleversions
        classpath Dependencies.tools_gradleandroid
        classpath Dependencies.tools_kotlin
        classpath Dependencies.kotlin_extensions
        classpath 'com.google.gms:google-services:4.3.8'
        classpath 'com.google.firebase:firebase-crashlytics-gradle:2.6.1'
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"

        // NOTE: Do not place your application dependencies here; they belong
        // in the individual module build.gradle files
    }
}

allprojects {
    repositories {
        google()
        jcenter()
    }
}


subprojects {
    afterEvaluate { project ->
        if (project.hasProperty('android')) {
            apply plugin: "com.github.ben-manes.versions"

            def apikeyPropertiesFile = rootProject.file("apikey.properties")
            def apikeyProperties = new Properties()
            apikeyProperties.load(new FileInputStream(apikeyPropertiesFile))

            android {
                buildToolsVersion Config.buildTools
                compileSdkVersion Config.compileSdk

                defaultConfig {
                    minSdkVersion Config.minSdk
                    targetSdkVersion Config.targetSdk
                    testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
                    buildConfigField("String", "MOVIE_DB_KEY", apikeyProperties['MOVIE_DB_KEY'])
                }

                compileOptions {
                    sourceCompatibility Config.javaVersion
                    targetCompatibility Config.javaVersion
                }
                sourceSets {
                    main.java.srcDirs += 'src/main/kotlin'
                }
                kotlinOptions {
                    jvmTarget = "1.8"
                }

                packagingOptions {
                    exclude 'META-INF/DEPENDENCIES'
                    exclude 'META-INF/LICENSE'
                    exclude 'META-INF/LICENSE.txt'
                    exclude 'META-INF/license.txt'
                    exclude 'META-INF/NOTICE'
                    exclude 'META-INF/NOTICE.txt'
                    exclude 'META-INF/notice.txt'
                    exclude 'META-INF/ASL2.0'
                    exclude("META-INF/*.kotlin_module")
                }
            }
        }
    }
}

task clean(type: Delete) {
    delete rootProject.buildDir
}